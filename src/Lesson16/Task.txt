Всё о классе String.

Объявление / создание объектов класса String.

String самый распространенный класс в Java.
Он находится в пакете java.lang, данный пакет по умолчанию импортируется в каждый класс из-за его частого использования.

Объявление и создание объектов класса String:

1. Как и любой объект можно создать через конструктор new ().
При этом идёт создание именного нового объекта класса String.

2. Без использования конструктора String s2 = "Hello". Но в данном случае нет гарантии на создание нового объекта, так как первоначально jvm проверяет,
нет ли данного объекта в String pool, только в случае отсутствия создает новый объект и записывает его значение в String pool.
Новый объект создаётся только если его нет в String pool.

3. System.out.println ("Hello!").
Но в данном случае нет гарантии на создание нового объекта, так как первоначально jvm проверяет,
нет ли данного объекта в String pool, только в случае отсутствия создает новый объект и записывает его значение в String pool.
Новый объект создаётся только если его нет в String pool.

4. StringBuilder sb1 = new StringBuilder("Hello");
   String s1 = new String (sb1);

5. StringBuffer sb1 = new StringBuffer("Hello");
   String s1 = new String (sb1);

Массив - array, это объект, который представляет собой коллекцию каких-либо значений.
{0,5,-3,19,6} - это массив типа данных int, в массиве не могут быть использованы разные типы данных.
У элементов массива есть само значение этого элемента и индекс элемента, т.е. его положение в массиве, индекс в массиве всегда начинается с 0.

String is immutable.
Т.е. неизменный, если мы написали String s = "Privet"; , то вот это "Privet" никак не может быть изменено.
Это достигается с помощью 3-х факторов:
1. String хранит свое значение в private массиве (из-за того, что он приватный, он виден только внутри класса String), к тому же массив имеет фиксированную длину.
2. String хранит свое значение в final массиве (т.е. его инициализация мб только 1 раз).
3. Ни один из методов класса String не изменяет индивидуальные элементы массива типа char.

Методы класса String.

!!!Важно!!!
Ни один из методов в классе String сам объект класса String не меняет, потому что объект класса String is immutable.

1. length() -> in - метод никаких параметров не принимает, возвращает тип данных int и помогает найти нам длину.
2. charAt(int index) -> char - (В переводе СИМВОЛ НА (значение индекса в параметрах)) - т.е. можно определить какой символ находится в массиве на определенном индексе.
3. indexOf(char c) -> int
   indexOf(String s) -> int
   indexOf(char c, int fromIndex) -> int
   indexOf(String s, int fromIndex) -> int
   - метод позволяет узнать какой индекс у определенного char или String. fromIndex добавляется в параметры, когда хотим узнать индекс определенного char или String, но начиная после какого-то индекса,
т.е. не с начала с 0, а, например, с 5.
4. startsWith (String prefix) -> boolean - метод показывает начинается или не начинается строка с определенного String.
   startsWith (String prefix, int from) -> boolean - то же самое, только проверка происходит не с 0го индекса, а с заданного.
5. endsWith(String suffix) -> boolean - метод показывает заканчивается ли строка на определенный String.
6. substring (int beginindex) -> String - метод показывающий кусочек строки String, начиная с индекса в параметрах.
   substring (int beginindex, int endindex) -> String - метод показывающий кусочек строки String, начиная с индекса в параметрах, и заканчивая индексом в параметрах (невключительно, т.е. endindex -1).
7. trim() -> String - метод убирает пробелы по бокам String, и при этом метод trim() создает новый объект String.
8. replace (char oldChar, char newChar) -> String - метод для замены, и при этом создаёт новый объект String.
   replace (String oldString, String newString) -> String
!!ВАЖНО!!!
Нельзя путать char и String.
9. concat (String str) -> String - метод конкатенации, и при этом создаёт новый объект String.
10. toLowerCase () -> String - метод все буквы делает маленькими и возвращает новый String.
11. toUpperCase () ->  - метод все буквы делает большими и возвращает новый String.
12. contains (String str) -> boolean - метод показывает состоит ли объект класса String из данных типа String в параметрах метода.
13. isBlank() -> boolean - метод показывает нам состоит ли объект String из таких символов как пробел, таб, и т.д., в этом случае метод возвращает true.
14. isEmpty() ->boolean - метод возвращает true, когда мы имеем дело с пустым объектом класса String.
15. strip, stripLeading, stripTrailing - метод похожий на trim(), но лучше (советуют использовать именно его, так как strip распознает больше символов).
stripLeading - удаляет пробелы только в начале.
stripTrailing - удаляет пробелы в конце.
В случае изменения в объекте (удалении пробелов), методы strip, stripLeading, stripTrailing возвращают новый объект, но если удалять было нечего, то объект
остается неизменным и методы на выходе ссылаются на тот же объект.

!!!Цепочка методов выполняется последовательно слева направо!!!

Определение равенства String:
1. == - происходит сравнение не самого объекта String, а сравнение ссылок на эти объекты.
Например:
String s1 = new String ("ok");
String s2 = new String ("ok");
s1==s2 ? false

2. Метод .equals() - метод для сравнения String, именно как объекта. Этот метод перезаписан и изменен, не равен ==.
Например:
String s1 = new String ("ok");
String s2 = new String ("ok");
s1.equals(s2) ? true, т.к. оба объекта содержат "ok".

2. Метод .equalsIgnoreCase() - метод для сравнения String, именно как объекта, но в отличие от .equals() игнорирует большие и маленькие символы, для него они одинаковы по значению.
=======
Всё о классе String.

Объявление / создание объектов класса String.

String самый распространенный класс в Java.
Он находится в пакете java.lang, данный пакет по умолчанию импортируется в каждый класс из-за его частого использования.

Объявление и создание объектов класса String:

1. Как и любой объект можно создать через конструктор new ().
При этом идёт создание именного нового объекта класса String.

2. Без использования конструктора String s2 = "Hello". Но в данном случае нет гарантии на создание нового объекта, так как первоначально jvm проверяет,
нет ли данного объекта в String pool, только в случае отсутствия создает новый объект и записывает его значение в String pool.
Новый объект создаётся только если его нет в String pool.

3. System.out.println ("Hello!").
Но в данном случае нет гарантии на создание нового объекта, так как первоначально jvm проверяет,
нет ли данного объекта в String pool, только в случае отсутствия создает новый объект и записывает его значение в String pool.
Новый объект создаётся только если его нет в String pool.

Массив - array, это объект, который представляет собой коллекцию каких-либо значений.
{0,5,-3,19,6} - это массив типа данных int, в массиве не могут быть использованы разные типы данных.
У элементов массива есть само значение этого элемента и индекс элемента, т.е. его положение в массиве, индекс в массиве всегда начинается с 0.

String is immutable.
Т.е. неизменный, если мы написали String s = "Privet"; , то вот это "Privet" никак не может быть изменено.
Это достигается с помощью 3-х факторов:
1. String хранит свое значение в private массиве (из-за того, что он приватный, он виден только внутри класса String), к тому же массив имеет фиксированную длину.
2. String хранит свое значение в final массиве (т.е. его инициализация мб только 1 раз).
3. Ни один из методов класса String не изменяет индивидуальные элементы массива типа char.

Методы класса String.

!!!Важно!!!
Ни один из методов в классе String сам объект класса String не меняет, потому что объект класса String is immutable.

1. length() -> in - метод никаких параметров не принимает, возвращает тип данных int и помогает найти нам длину.
2. charAt(int index) -> char - (В переводе СИМВОЛ НА (значение индекса в параметрах)) - т.е. можно определить какой символ находится в массиве на определенном индексе.
3. indexOf(char c) -> int
   indexOf(String s) -> int
   indexOf(char c, int fromIndex) -> int
   indexOf(String s, int fromIndex) -> int
   - метод позволяет узнать какой индекс у определенного char или String. fromIndex добавляется в параметры, когда хотим узнать индекс определенного char или String, но начиная после какого-то индекса,
т.е. не с начала с 0, а, например, с 5.
4. startsWith (String prefix) -> boolean - метод показывает начинается или не начинается строка с определенного String.
   startsWith (String prefix, int from) -> boolean - то же самое, только проверка происходит не с 0го индекса, а с заданного.
5. endsWith(String suffix) -> boolean - метод показывает заканчивается ли строка на определенный String.
6. substring (int beginindex) -> String - метод показывающий кусочек строки String, начиная с индекса в параметрах.
   substring (int beginindex, int endindex) -> String - метод показывающий кусочек строки String, начиная с индекса в параметрах, и заканчивая индексом в параметрах (невключительно, т.е. endindex -1).
7. trim() -> String - метод убирает пробелы по бокам String, и при этом метод trim() создает новый объект String.
8. replace (char oldChar, char newChar) -> String - метод для замены, и при этом создаёт новый объект String.
   replace (String oldString, String newString) -> String
!!ВАЖНО!!!
Нельзя путать char и String.
9. concat (String str) -> String - метод конкатенации, и при этом создаёт новый объект String.
10. toLowerCase () -> String - метод все буквы делает маленькими и возвращает новый String.
11. toUpperCase () ->  - метод все буквы делает большими и возвращает новый String.
12. contains (String str) -> boolean - метод показывает состоит ли объект класса String из данных типа String в параметрах метода.

!!!Цепочка методов выполняется последовательно слева направо!!!

Определение равенства String:
1. == - происходит сравнение не самого объекта String, а сравнение ссылок на эти объекты.
Например:
String s1 = new String ("ok");
String s2 = new String ("ok");
s1==s2 ? false

2. Метод .equals() - метод для сравнения String, именно как объекта. Этот метод перезаписан и изменен, не равен ==.
Например:
String s1 = new String ("ok");
String s2 = new String ("ok");
s1.equals(s2) ? true, т.к. оба объекта содержат "ok".

2. Метод .equalsIgnoreCase() - метод для сравнения String, именно как объекта, но в отличие от .equals() игнорирует большие и маленькие символы, для него они одинаковы по значению.