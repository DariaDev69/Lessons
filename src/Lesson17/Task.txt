Класс StringBuilder - класс похож на класс String, но используется в случаях, когда нам необходим объект как String, но который будет постоянно менять своё значение.
Ведь объект класса String - неизменен.
StringBuilder is mutable.
StringBuilder также находится в пакете java.lang, поэтому нам не требуется импортировать его самостоятельно.

Создание объектов класса StringBuilder:
1. StringBuilder sb1 = new StringBuilder (); // !!! по умолчанию вместимость составляет 16 символов !!!, но это кол-во символов может быть увеличено, путем создания нового массива.
2. StringBuilder sb2 = new StringBuilder ("Good Day!");
3. StringBuilder sb3 = new StringBuilder (50); // внутри типа данных int, и он означает вместимость объекта (capacity), т.е. в данном случае вместимость 50.
4. StringBuilder sb4 = new StringBuilder (sb2); // т.е. с использование в параметрах конструктора другой объект класса StringBuilder.

Методы класса StringBuilder:
1. length() -> in - метод никаких параметров не принимает, возвращает тип данных int и помогает найти нам длину.
2. charAt(int index) -> char - (В переводе СИМВОЛ НА (значение индекса в параметрах)) - т.е. можно определить какой символ находится в массиве на определенном индексе.
3. indexOf(String s) -> int
   indexOf(String s, int fromIndex) -> int
   - метод позволяет узнать какой индекс у определенного String. fromIndex добавляется в параметры, когда хотим узнать индекс определенного String, но начиная после какого-то индекса,
т.е. не с начала с 0, а, например, с 5.
!!!в отличие от такого же метода в классе String, в данном методе нельзя использовать в качестве параметра char.!!!

4. subString(int beginindex) -> String - метод показывающий кусочек строки String, начиная с индекса в параметрах.
   subString(int beginindex, int endindex) -> String - метод показывающий кусочек строки String, начиная с индекса в параметрах, и заканчивая индексом в параметрах (невключительно, т.е. endindex -1).
5. subSequence(int start, int end) -> CharSequence - метод, который показывает отрывок последовательности символов (почти как substring).
6. append(dataType dt) -> StringBuilder - метод, который в окончание StringBuilder добавляет какое-то значение, но этот метод не делает новый StringBuilder, а меняет тот,
к которому применяется.
7. insert(int toIndex, dataType dt) -> StringBuilder - метод, который вставляет на определённую позицию, определённый индекс определенный символ, но этот метод не делает новый StringBuilder, а меняет тот, к которому применяется.
Т.е. это расширенный по функциональности метод append(dataType dt).
8. delete(int start, int end) -> StringBuilder - метод, который будет удалять определенные символы, начиная с индекса start и заканчивая индексом end-1, но этот метод не делает новый StringBuilder, а меняет тот, к которому применяется.
9. deleteCharAt(int index) -> StringBuilder - метод, который удаляет символ на определенном индексе, так же меняя объект StringBuilder, а не создавая новый.
10. reverse() -> StringBuilder - метод, который переворачивает StringBuilder в обратную сторону, естественно меняя его при этом.
11. replace(int start, int end, String s) -> StringBuilder - метод меняет отрезок от start до end-1 на определенный String s.
12. capacity() -> int - метод показывает вместимость в массиве для наших символов.
13. append (array,int starIndex, int amoundChar) -> StringBuilder - метод добавляет в конец StringBuilder кусок массива array, начиная с индекса starIndex (включительно),
в количестве amoundChar символов.
14. insert (int afterIndex, array, int starIndex, int amoundChar) -> StringBuilder - метод вставляет в StringBuilder (после позиции int afterIndex) кусок массива array, начиная с индекса starIndex (включительно),
 в количестве amoundChar символов.

!!!Method chaining (цепочка методов) выполняется последовательно слева направо.!!!

Также существует класс StringBuffer, который по функциональности схож со StringBuilder.













